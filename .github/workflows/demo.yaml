name: scaffold-stylus-demo workflow

on:
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - "packages/nextjs/**"

jobs:
  version-bump-stylus:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: Arb-Stylus/scaffold-stylus
          token: ${{ secrets.ORG_GITHUB_TOKEN }}
          path: source_repo

      - name: Parse rust-toolchain.toml
        id: parse-toolchain
        run: |
          cd source_repo
          # Extract channel/version
          CHANNEL=$(grep -o 'channel = "[^"]*"' packages/stylus/your-contract/rust-toolchain.toml | cut -d'"' -f2)
          echo "toolchain=$CHANNEL" >> $GITHUB_OUTPUT

          # Extract components (only from the components section, without quotes)
          COMPONENTS=$(awk '/components = \[/,/\]/' packages/stylus/your-contract/rust-toolchain.toml | grep -o '"[^"]*"' | sed 's/"//g' | tr '\n' ',' | sed 's/,$//')
          echo "components=$COMPONENTS" >> $GITHUB_OUTPUT

          # Extract targets (only from the targets section, without quotes)
          TARGETS=$(awk '/targets = \[/,/\]/' packages/stylus/your-contract/rust-toolchain.toml | grep -o '"[^"]*"' | sed 's/"//g' | tr '\n' ',' | sed 's/,$//')
          echo "targets=$TARGETS" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.parse-toolchain.outputs.toolchain }}
          components: ${{ steps.parse-toolchain.outputs.components }}
          target: ${{ steps.parse-toolchain.outputs.targets }}
          override: true

      - name: Install cargo-stylus
        run: |
          cd source_repo
          cargo install --force cargo-stylus

      - name: Install foundry cast
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install solc
        run: |
          sudo add-apt-repository ppa:ethereum/ethereum -y
          sudo apt-get update
          sudo apt-get install solc -y

      - name: Modify scaffoldConfig in Source Repository
        run: |
          cd source_repo
          sed -i 's/targetNetworks: \[chains.arbitrumNitro\]/targetNetworks: \[chains.arbitrumSepolia\]/' packages/nextjs/scaffold.config.ts
          cat packages/nextjs/scaffold.config.ts

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 24
          registry-url: "https://registry.yarnpkg.com"

      # TODO: setup yarn cache
      - name: Install dependencies
        run: |
          cd source_repo
          yarn install

      - name: Deploy contracts to Sepolia
        if: success()
        id: deploy-contract
        env:
          PRIVATE_KEY_SEPOLIA: ${{ secrets.PRIVATE_KEY_SEPOLIA }}
          ACCOUNT_ADDRESS_SEPOLIA: ${{ secrets.ACCOUNT_ADDRESS_SEPOLIA }}
          RPC_URL_SEPOLIA: ${{ secrets.RPC_URL_SEPOLIA }}
        run: |
          cd source_repo
          yarn deploy --network sepolia

      - name: Deploy to vercel
        if: success()
        id: deploy
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          RPC_URL_SEPOLIA: ${{ secrets.RPC_URL_SEPOLIA }}
        run: |
          cd source_repo/packages/nextjs
          vercel link --yes --project $VERCEL_PROJECT_ID --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID
          yarn vercel --build-env NEXT_PUBLIC_IGNORE_BUILD_ERROR=true --build-env NEXT_PUBLIC_SEPOLIA_PROVIDER_URL=$RPC_URL_SEPOLIA --prod --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID

      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "GitHub deployed to vercel result: ${{ job.status }}\nRepository Name: ${{ github.repository }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "GitHub deployed to vercel result: ${{ job.status }}\nRepository Name: ${{ github.repository }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
